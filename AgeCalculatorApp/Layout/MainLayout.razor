@using System.ComponentModel.DataAnnotations
@using AgeCalculatorApp.Pages
@using AgeCalculatorApp.Validators
@inherits LayoutComponentBase
<div class="page">
    <main>
        <EditForm EditContext="editContext" OnValidSubmit="Calculate" OnInvalidSubmit="HandleInvalidSubmit" FormName="age-calculator-form">
            <fieldset>
                <DataAnnotationsValidator />
                <label class="@InvalidDayClass">DAY</label>
                <label class="@InvalidMonthClass">MONTH</label>
                <label class="@InvalidYearClass">YEAR</label>
                <div>
                    <InputNumber class="date-input" @bind-Value="Model!.Day" placeholder="DD" />
                    <ValidationMessage For="() => Model.Day" />
                </div>
                <div>
                    <InputNumber class="date-input" @bind-Value="Model!.Month" placeholder="MM" />
                    <ValidationMessage For="() => Model.Month" />
                </div>
                <div>
                    <InputNumber class="date-input" @bind-Value="Model!.Year" placeholder="YYYY" />
                    <ValidationMessage For="() => Model.Year" />
                </div>
            </fieldset>
            <hr />
            <button type="submit">
                <img src="images/icon-arrow.svg" />
            </button>
        </EditForm>
        <p class="calculated-age">
            <span>
                @if (isCounterVisible)
                {
                    <Counter MaxValue="@Result.Years" />
                }
                else
                {
                    <Counter />
                }
                years
            </span>
            <span>
                @if (isCounterVisible)
                {
                    <Counter MaxValue="@Result.Months" />
                }
                else
                {
                    <Counter />
                }
                months
            </span>
            <span>
                @if (isCounterVisible)
                {
                    <Counter MaxValue="@Result.Days" />
                }
                else
                {
                    <Counter />
                }
                days
            </span>
        </p>
    </main>
</div>

@code {
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    [SupplyParameterFromForm]
    private Input? Model { get; set; }
    private CalculatedValues Result = new();
    private string? InvalidDayClass { get; set; } = null;
    private string? InvalidMonthClass { get; set; } = null;
    private string? InvalidYearClass { get; set; } = null;
    private bool isCounterVisible = false;

    protected override void OnInitialized()
    {
        Model ??= new();
        editContext = new(Model);
        messageStore = new(editContext);
        editContext.OnValidationStateChanged += HandleValidationStateChanged;
    }

    private void Calculate()
    {
        var day = Model!.Day ?? throw new ArgumentException(nameof(Input.Day));
        var month = Model!.Month ?? throw new ArgumentException(nameof(Input.Month));
        var year = Model!.Year ?? throw new ArgumentException(nameof(Input.Year));

        InvalidDayClass = InvalidMonthClass = InvalidYearClass = null;

        var dateInput = new DateTime(year, month, day);
        var today = DateTime.Today;

        var years = today.Year - dateInput.Year;

        if (today.Month < dateInput.Month || (today.Month == dateInput.Month && today.Day < dateInput.Day))
            years--; // If the end date's month/day is earlier, reduce the number of years

        int months = today.Month - dateInput.Month;
        if (months < 0)
            months += 12;
        if (today.Day < dateInput.Day)
            months--; // If the end day is earlier than the start day, reduce the number of months

        int days = today.Day - dateInput.Day;
        if (days < 0)
        {
            var previousMonth = today.AddMonths(-1);
            days += DateTime.DaysInMonth(previousMonth.Year, previousMonth.Month);
        }

        Result.Days = days;
        Result.Months = months;
        Result.Years = years;

        isCounterVisible = true;
    }

    private void HandleInvalidSubmit()
    {
        TriggerYearValidation();
        TriggerDateValidation();
    }

    private void HandleValidationStateChanged(object? sender, ValidationStateChangedEventArgs args)
    {
        isCounterVisible = false;
        Result = new();

        var dayField = editContext!.Field(nameof(Model.Day));
        var monthField = editContext!.Field(nameof(Model.Month));
        var yearField = editContext!.Field(nameof(Model.Year));

        InvalidDayClass = editContext!.IsValid(dayField) ? null : "invalid";
        InvalidMonthClass = editContext!.IsValid(monthField) ? null : "invalid";
        InvalidYearClass = editContext!.IsValid(yearField) ? null : "invalid";

        var validationMessages = editContext.GetValidationMessages(dayField);

        if (validationMessages.Any(f => f.Contains("date")))
        {
            messageStore!.Add(monthField, "");
            messageStore!.Add(yearField, "");
        }
        else
        {
            messageStore!.Clear(monthField);
            messageStore!.Clear(yearField);
        }

        InvalidDayClass = editContext!.IsValid(dayField) ? null : "invalid";
        InvalidMonthClass = editContext!.IsValid(monthField) ? null : "invalid";
        InvalidYearClass = editContext!.IsValid(yearField) ? null : "invalid";
    }

    private void TriggerYearValidation()
    {
        var yearField = editContext!.Field(nameof(Model.Year));
        // Notify Blazor that the Year field has changed, which triggers validation
        editContext.NotifyFieldChanged(yearField);
    }

    private void TriggerDateValidation()
    {
        var dayField = editContext!.Field(nameof(Model.Day));
        // Notify Blazor that the Year field has changed, which triggers validation
        editContext.NotifyFieldChanged(dayField);
    }

    public class Input
    {
        private int _currentYear = DateTime.Today.Year;

        [ValidDate]
        public int? Day { get; set; }
        [Required(ErrorMessage = "This field is required")]
        [Range(1, 12, ErrorMessage = "Must be a valid month")]
        public int? Month { get; set; }
        [Required(ErrorMessage = "This field is required")]
        [YearRange]
        public int? Year { get; set; }
    }

    public class CalculatedValues
    {
        public int? Days { get; set; }
        public int? Months { get; set; }
        public int? Years { get; set; }
    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationStateChanged -= HandleValidationStateChanged;
        }
    }
}
