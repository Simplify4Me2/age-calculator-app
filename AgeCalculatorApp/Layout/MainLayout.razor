@using System.ComponentModel.DataAnnotations
@inherits LayoutComponentBase
<div class="page">
    @* <div class="sidebar">
    <NavMenu />
    </div> *@

    <main>
        @*  <div class="top-row px-4">
        <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div> *@
        <EditForm Model="Model" OnValidSubmit="Calculate" OnInvalidSubmit="HandleInvalidSubmit" FormName="age-calculator-form">
            <fieldset>
                <DataAnnotationsValidator />
                <label class="@InvalidClass">DAY</label>
                <label class="@InvalidClass">MONTH</label>
                <label class="@InvalidClass">YEAR</label>
                <div>
                    <InputNumber class="date-input" @bind-Value="Model!.Day" placeholder="DD" />
                    <ValidationMessage For="() => Model.Day" />
                </div>
                <div>
                    <InputNumber class="date-input" @bind-Value="Model!.Month" placeholder="MM" />
                    <ValidationMessage For="() => Model.Month" />
                </div>
                <div>
                    <InputNumber class="date-input" @bind-Value="Model!.Year" placeholder="YYYY" />
                    <ValidationMessage For="() => Model.Year" />
                </div>
            </fieldset>
            <hr />
            <button type="submit">
                <img src="images/icon-arrow.svg" />
            </button>
        </EditForm>
        <p class="calculated-age">
            <span><em>@Result.Years</em>years</span>
            <span><em>@Result.Months</em>months</span>
            <span><em>@Result.Days</em>days</span>
            @* <article class="content px-4">
            @Body
            </article> *@
        </p>
    </main>
</div>

@code {
    [SupplyParameterFromForm]
    private Input? Model { get; set; }
    private CalculatedValues Result = new();
    private string? InvalidClass { get; set; } = null;

    protected override void OnInitialized() => Model ??= new();

    private void Calculate()
    {
        Console.WriteLine($"Calculating... Day: {Model?.Day}, Month: {Model?.Month}, Year: {Model?.Year}");
        InvalidClass = null;
    }

    private void HandleInvalidSubmit()
    {
        InvalidClass = "invalid";
    }

    public class Input
    {
        [Required(ErrorMessage = "This field is required")]
        [Range(1, 31, ErrorMessage = "Must be a valid day")]
        public int? Day { get; set; }
        [Required(ErrorMessage = "This field is required")]
        [Range(1, 12, ErrorMessage = "Must be a valid month")]
        public int? Month { get; set; }
        [Required(ErrorMessage = "This field is required")]
        public int? Year { get; set; }
    }

    public class CalculatedValues
    {
        public string Days { get; set; } = "- -";
        public string Months { get; set; } = "- -";
        public string Years { get; set; } = "- -";
    }
}
