@using System.ComponentModel.DataAnnotations
@inherits LayoutComponentBase
<div class="page">
    @* <div class="sidebar">
    <NavMenu />
    </div> *@

    <main>
        @*  <div class="top-row px-4">
        <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div> *@
        <EditForm EditContext="editContext" OnValidSubmit="Calculate" OnInvalidSubmit="HandleInvalidSubmit" FormName="age-calculator-form">
            <fieldset>
                <DataAnnotationsValidator />
                <label class="@InvalidDayClass">DAY</label>
                <label class="@InvalidMonthClass">MONTH</label>
                <label class="@InvalidYearClass">YEAR</label>
                <div>
                    <InputNumber class="date-input" @bind-Value="Model!.Day" placeholder="DD" />
                    <ValidationMessage For="() => Model.Day" />
                </div>
                <div>
                    <InputNumber class="date-input" @bind-Value="Model!.Month" placeholder="MM" />
                    <ValidationMessage For="() => Model.Month" />
                </div>
                <div>
                    <InputNumber class="date-input" @bind-Value="Model!.Year" placeholder="YYYY" />
                    <ValidationMessage For="() => Model.Year" />
                </div>
            </fieldset>
            <hr />
            <button type="submit">
                <img src="images/icon-arrow.svg" />
            </button>
        </EditForm>
        <p class="calculated-age">
            <span><em>@Result.Years</em>years</span>
            <span><em>@Result.Months</em>months</span>
            <span><em>@Result.Days</em>days</span>
            @* <article class="content px-4">
            @Body
            </article> *@
        </p>
    </main>
</div>

@code {
    private EditContext? editContext;

    [SupplyParameterFromForm]
    private Input? Model { get; set; }
    private CalculatedValues Result = new();
    private string? InvalidDayClass { get; set; } = null;
    private string? InvalidMonthClass { get; set; } = null;
    private string? InvalidYearClass { get; set; } = null;

    protected override void OnInitialized()
    {
        Model ??= new();
        editContext = new(Model);
        editContext.OnValidationStateChanged += HandleValidationStateChanged;
    }

    private void Calculate()
    {
        Console.WriteLine($"Calculating... Day: {Model?.Day}, Month: {Model?.Month}, Year: {Model?.Year}");
        InvalidDayClass = InvalidMonthClass = InvalidYearClass = null;
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("Invalid...");

        // if (string.IsNullOrEmpty(Model!.Day)
        // if (Model!.Day is null)
        //     InvalidDayClass = "invalid";
        // if (Model!.Month is null)
        //     InvalidMonthClass = "invalid";
        // if (Model!.Year is null)
        //     InvalidYearClass = "invalid";
    }

    private void HandleValidationStateChanged(object? sender, ValidationStateChangedEventArgs args)
    {
        var dayField = editContext!.Field(nameof(Model.Day));
        var monthField = editContext!.Field(nameof(Model.Month));
        var yearField = editContext!.Field(nameof(Model.Year));

        if (editContext!.IsValid(dayField))
            InvalidDayClass = null;
        else
            InvalidDayClass = "invalid";

        if (editContext!.IsValid(monthField))
            InvalidMonthClass = null;
        else
            InvalidMonthClass = "invalid";

        if (editContext!.IsValid(yearField))
            InvalidYearClass = null;
        else
            InvalidYearClass = "invalid";
    }

    public class Input
    {
        private int _currentYear = DateTime.Today.Year;

        [Required(ErrorMessage = "This field is required")]
        [Range(1, 31, ErrorMessage = "Must be a valid day")]
        public int? Day { get; set; }
        [Required(ErrorMessage = "This field is required")]
        [Range(1, 12, ErrorMessage = "Must be a valid month")]
        public int? Month { get; set; }
        [Required(ErrorMessage = "This field is required")]
        [YearRange]
        public int? Year { get; set; }
    }

    public class YearRangeAttribute : ValidationAttribute
    {
        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
        {
            if (value is null)
                return ValidationResult.Success;

            int currentYear = DateTime.Today.Year;
            if (value is int year)
            {
                if (year < 1 || year > currentYear)
                    return new ValidationResult("Must be in the past");
            }

            // return base.IsValid(value, validationContext);
            return ValidationResult.Success;
        }
    }

    public class CalculatedValues
    {
        private const string Placeholder = "- -";

        public string Days { get; set; } = Placeholder;
        public string Months { get; set; } = Placeholder;
        public string Years { get; set; } = Placeholder;
    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationStateChanged -= HandleValidationStateChanged;
        }
    }
}
